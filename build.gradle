group = 'com.nablarch.framework'
version = '1.1.1'
description = 'ETL機能を実現する'

buildscript {
  repositories {
    mavenLocal()
    maven { url "${developLibUrl}" }
    jcenter()
  }
  dependencies {
    classpath "com.nablarch.dev:nablarch-gradle-plugin:${nablarchGradlePluginVersion}"
    classpath "net.saliman:gradle-cobertura-plugin:${coberturaPluginVersion}"
  }
}

apply plugin: 'com.nablarch.dev.nablarch-build'
apply plugin: 'com.nablarch.dev.nablarch-maven-deploy'
apply plugin: 'com.nablarch.dev.nablarch-sonarqube'
apply plugin: 'com.nablarch.dev.nablarch-version'
apply from: 'https://github.com/nablarch/nablarch-gradle-plugin/blob/develop/scripts/cobertura/cobertura-0.0.1.gradle?raw=true'

// ビルド時のJavaバージョンを指定する
sourceCompatibility=JavaVersion.VERSION_1_6
targetCompatibility=JavaVersion.VERSION_1_6

configurations {
  all*.exclude module: 'jsp-api-2.1-glassfish'
}

dependencies {
  provided 'javax.inject:javax.inject:1'
  provided 'javax.batch:javax.batch-api:1.0'
  provided 'javax.enterprise:cdi-api:1.1'

  compile "com.nablarch.framework:nablarch-core-validation-ee:${nablarchCoreValidationEeVersion}"
  compile "com.nablarch.framework:nablarch-common-dao:${nablarchCommonDaoVersion}"
  compile ("com.nablarch.framework:nablarch-fw-batch-ee:${nablarchFwBatchEeVersion}") {
    exclude group:'*', module: 'el-api' // exclude javax.el.*
  }
  compile "com.nablarch.framework:nablarch-common-databind:${nablarchCommonDatabindVersion}"

  compile 'com.fasterxml.jackson.core:jackson-databind:2.5.4'
  provided 'javax.validation:validation-api:1.1.0.Final'

  // test api
  testCompile 'org.jmockit:jmockit:1.13'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-all:1.3'

  testRuntime 'org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.0.Final'
  testRuntime 'org.jberet:jberet-core:1.2.2.Final'
  testRuntime 'org.jboss.marshalling:jboss-marshalling:1.4.10.Final'
  testRuntime 'org.jboss.logging:jboss-logging:3.2.1.Final'
  testRuntime 'org.jboss.weld:weld-core:2.2.12.Final'
  testRuntime 'org.wildfly.security:wildfly-security-manager:1.1.2.Final'
  testRuntime 'com.google.guava:guava:18.0'
  testRuntime 'org.jberet:jberet-se:1.2.0.Final'
  testRuntime 'org.jboss.weld.se:weld-se:2.2.12.Final'
  testRuntime 'org.slf4j:slf4j-api:1.7.9'
  testRuntime 'ch.qos.logback:logback-classic:1.0.13'

  testRuntime 'org.hibernate:hibernate-validator:5.1.3.Final'
  testRuntime 'org.glassfish:javax.el:3.0.0'
  testRuntime 'log4j:log4j:1.2.17'
}

test {

  jvmArgs (
          '-XX:+UseParallelGC',
          '-Dfile.encoding=UTF-8',
          '-XX:-UseSplitVerifier'
  )

  ignoreFailures = true


  def jdk8Home = System.getenv('JDK8_HOME')
  doFirst {
    if (jdk8Home != null && !jdk8Home.isEmpty()) {
      executable = "${jdk8Home}/bin/java"
    }

    def logDir = new File('log')
    if (!logDir.exists()) {
      assert logDir.mkdirs()
    }
    copy {
      from 'build/resources/main/META-INF/beans.xml'
      into 'build/classes/main/META-INF/'
    }
    copy {
      from 'build/resources/test/META-INF/beans.xml'
      into 'build/classes/test/META-INF/'
    }
  }
}

tasks.sonarRunner {
  dependsOn = ['coverage']
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}

idea {
  module {
    outputDir = sourceSets.main.output.classesDir
    testOutputDir = sourceSets.test.output.classesDir
  }
}


